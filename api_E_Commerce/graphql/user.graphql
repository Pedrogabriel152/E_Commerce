"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    phone: String!

    address: String!

    permission: Permission! @hasOne

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

input UserInput {
    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    phone: String!

    address: String!

    permission_id: Permission!
}

type ResponseUser implements Response {
    code: Int!
    message: String!
    user: User
}

# extend type Query {
#   "Find a single user by an identifying attribute."
#   user(
#     "Search by primary key."
#     id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

#     "Search by email address."
#     email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
#   ): User @find

#   # users(name: String!): [User]! @field(resolver: "App\\GraphQL\\Queries\\UserQuery@getUser")

#   # "List multiple users."
#   users(
#     "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
#     where: _ @whereConditions(columns: ["name"])
#   ): [User]! @paginate(defaultCount: 10) 
# }

# extend type Mutation @guard {
#   editUser(user: UserInput!): ResponseUser! @field(resolver: "App\\GraphQL\\Mutations\\UserMutation@update")
# }