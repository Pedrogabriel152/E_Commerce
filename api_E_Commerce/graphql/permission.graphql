type Permission {
    id: ID!
    description: String!
}

input PermissionInput {
    description: String!
}

type ResponsePermission implements Response {
  code: Int!
  message: String!
}

extend type Query {
    type(id: ID!): Permission @find
#   "Find a single user by an identifying attribute."
#   user(
#     "Search by primary key."
#     id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

#     "Search by email address."
#     email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
#   ): User @find

  # users(name: String!): [User]! @field(resolver: "App\\GraphQL\\Queries\\UserQuery@getUser")

  # "List multiple users."
#   users(
#     "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
#     where: _ @whereConditions(columns: ["name"])
#   ): [User]! @paginate(defaultCount: 10) 
}

extend type Mutation {
  createPermission(permission: PermissionInput!): ResponsePermission! @field(resolver: "App\\GraphQL\\Mutations\\PermissionMutation@create")
}
