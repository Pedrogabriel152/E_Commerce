type Product {
    id: ID!
    product: String!
    price: Float!
    amount: Int!
    description: String!
    image: String!
    available_by_id: Int!
    user: User @belongsTo
}

type ResponseProduct implements Response {
    code: Int!
    message: String!
    product: Product
}

input ProductInput {
    product: String!
    amount: Int!
    description: String!
    image: Upload
    price: Float!
    available_by_id: Int
}

extend type Query @guard {
    "Find a single user by an identifying attribute."
    product(id: ID! @eq @rules(apply: ["int"])): Product @find

    products(where: _ @whereConditions(columns: ["product", "active"]),
        orderBy: _ @orderBy(columns: ["created_at"])
    ): [Product]! @paginate(defaultCount: 10)
}

extend type Mutation @guard {
    createProduct(product: ProductInput!): ResponseProduct! @field(resolver: "App\\GraphQL\\Mutations\\ProductMutation@create")
    updateProduct(id: ID!, product: ProductInput!): ResponseProduct! @field(resolver: "App\\GraphQL\\Mutations\\ProductMutation@update")
    deleteProduct(id: ID!): ResponseProduct! @field(resolver: "App\\GraphQL\\Mutations\\ProductMutation@delete")
    addToCart(id: ID!, amount: Int!) : ResponseProduct! @field(resolver: "App\\GraphQL\\Mutations\\ProductMutation@addToCart")
    removeToCart(idCart: ID!, idProduct: Int!) : [Product]! @field(resolver: "App\\GraphQL\\Mutations\\ProductMutation@removeToCart")
}